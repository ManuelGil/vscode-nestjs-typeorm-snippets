{
  "TypeORM JoinColumn": {
    "prefix": ["ns_typeorm_deco_join_column", "@JoinColumn"],
    "description": "@JoinColumn with common options (quoted names)",
    "scope": "typescript",
    "body": ["@JoinColumn({", "  name: '${1:column_name}',", "  referencedColumnName: '${2:referenced_column_name}',", "  foreignKeyConstraintName: '${3:fk_name}'", "})", "$0"]
  },
  "TypeORM JoinTable": {
    "prefix": ["ns_typeorm_deco_join_table", "@JoinTable"],
    "description": "@JoinTable with table and column names quoted",
    "scope": "typescript",
    "body": ["@JoinTable({", "  name: '${1:table_name}',", "  joinColumn: {", "    name: '${2:column_name}',", "    referencedColumnName: '${3:referenced_column_name}'", "  },", "  inverseJoinColumn: {", "    name: '${4:column_name}',", "    referencedColumnName: '${5:referenced_column_name}'", "  }", "})", "$0"]
  },
  "TypeORM ManyToMany": {
    "prefix": ["ns_typeorm_deco_many_to_many", "@ManyToMany"],
    "description": "@ManyToMany with common options (cascade, deletes)",
    "scope": "typescript",
    "body": ["@ManyToMany((${1:type}) => ${2:Entity}, (${3:alias}) => ${4:alias}.${5:relation}, {", "  eager: ${6:false},", "  cascade: ${7:true},", "  onDelete: '${8:CASCADE}',", "  onUpdate: '${9:CASCADE}',", "})", "${10:property}: ${2:Entity}[];", "$0"]
  },
  "TypeORM ManyToOne": {
    "prefix": ["ns_typeorm_deco_many_to_one", "@ManyToOne"],
    "description": "@ManyToOne with common options",
    "scope": "typescript",
    "body": ["@ManyToOne((${1:type}) => ${2:Entity}, (${3:alias}) => ${4:alias}.${5:relation}, {", "  eager: ${6:false},", "  cascade: ${7:true},", "  onDelete: '${8:CASCADE}',", "  onUpdate: '${9:CASCADE}',", "})", "${10:property}: ${2:Entity};", "$0"]
  },
  "TypeORM OneToMany": {
    "prefix": ["ns_typeorm_deco_one_to_many", "@OneToMany"],
    "description": "@OneToMany with common options",
    "scope": "typescript",
    "body": ["@OneToMany((${1:type}) => ${2:Entity}, (${3:alias}) => ${4:alias}.${5:relation}, {", "  eager: ${6:false},", "  cascade: ${7:true},", "  onDelete: '${8:CASCADE}',", "  onUpdate: '${9:CASCADE}',", "  orphanedRowAction: '${10:delete}',", "})", "${11:property}: ${2:Entity}[];", "$0"]
  },
  "TypeORM OneToOne": {
    "prefix": ["ns_typeorm_deco_one_to_one", "@OneToOne"],
    "description": "@OneToOne with common options",
    "scope": "typescript",
    "body": ["@OneToOne((${1:type}) => ${2:Entity}, (${3:alias}) => ${4:alias}.${5:relation}, {", "  eager: ${6:false},", "  cascade: ${7:true},", "  onDelete: '${8:CASCADE}',", "  onUpdate: '${9:CASCADE}',", "})", "${10:property}: ${2:Entity};", "$0"]
  },
  "TypeORM RelationCount": {
    "prefix": ["ns_typeorm_deco_relation_count", "@RelationCount"],
    "description": "@RelationCount helper decorator",
    "scope": "typescript",
    "body": ["@RelationCount((entity) => entity.${1:relation})", "${2:property}: number;", "$0"]
  },
  "TypeORM RelationId": {
    "prefix": ["ns_typeorm_deco_relation_id", "@RelationId"],
    "description": "@RelationId helper decorator",
    "scope": "typescript",
    "body": ["@RelationId((entity) => entity.${1:relation})", "${2:property}: any[];", "$0"]
  }
}
